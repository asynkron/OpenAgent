name: Auto release patch version

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  bump-and-release:
    outputs:
      tag: ${{ steps.version.outputs.tag }}
    # Skip when the push is the automated release commit itself
    if: github.event.head_commit.message != null && !startsWith(github.event.head_commit.message, 'chore(release):')
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '20'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Bump patch version
        id: version
        run: |
          tag=$(npm version patch -m "chore(release): %s")
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Push release commit and tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD --follow-tags

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view "${{ steps.version.outputs.tag }}" > /dev/null 2>&1; then
            echo "Release ${{ steps.version.outputs.tag }} already exists; skipping creation."
          else
            gh release create "${{ steps.version.outputs.tag }}" --generate-notes
          fi

  publish-to-npm:
    name: Publish package to npm
    needs: bump-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      NODE_VERSION: '20'
      RELEASE_TAG: ${{ needs.bump-and-release.outputs.tag }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.RELEASE_TAG }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          scope: '@asynkron'
          always-auth: true

      - name: Install dependencies
        run: npm ci

      - name: Verify release tag matches package version
        run: npm run release:verify-tag -- "$RELEASE_TAG"

      - name: Determine package version
        id: pkg
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "package_version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Check if npm version already exists
        id: version_check
        run: |
          if npm view "@asynkron/openagent@${{ steps.pkg.outputs.package_version }}" version > /dev/null 2>&1; then
            echo "already_published=true" >> "$GITHUB_OUTPUT"
            echo "Version ${{ steps.pkg.outputs.package_version }} already exists on npm; skipping publish."
          else
            echo "already_published=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish to npm
        if: steps.version_check.outputs.already_published != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "NPM_TOKEN secret is missing; cannot publish." >&2
            exit 1
          fi
          npm publish --provenance --access public
