#!/usr/bin/env node

import * as fs from 'node:fs';
import * as path from 'node:path';
import { fileURLToPath } from 'node:url';

const PACKAGE_ROOT = path.dirname(fileURLToPath(new URL('.', import.meta.url)));
const PROMPTS_DIR = path.join(PACKAGE_ROOT, 'prompts');
const OUTPUT_FILE = path.join(PACKAGE_ROOT, 'src', 'config', 'generatedSystemPrompts.ts');

const HEADER = `// This file is auto-generated by scripts/generate-system-prompts.mjs.\n` +
  `// Run \`npm run build --workspace @asynkron/openagent-core\` after editing prompt markdown.\n` +
  `// Do not edit this file manually.\n`;

const enumDeclaration = `export enum CanonicalPromptFile {\n  System = 'system.md',\n  Developer = 'developer.md',\n}\n\nexport interface CanonicalPromptSection {\n  readonly file: CanonicalPromptFile;\n  readonly content: string;\n}\n\n`;

const CANONICAL_FILES = [
  { file: 'system.md', enumKey: 'System' },
  { file: 'developer.md', enumKey: 'Developer' },
];

const escapeTemplateLiteral = (value) =>
  value
    .replace(/\\/g, '\\\\')
    .replace(/`/g, '\\`')
    .replace(/\$\{/g, '\\${');

const readPrompt = (fileName) => {
  const filePath = path.join(PROMPTS_DIR, fileName);
  const raw = fs.readFileSync(filePath, 'utf8');
  return raw.replace(/\r\n/g, '\n');
};

const buildSection = (descriptor) => {
  const content = escapeTemplateLiteral(readPrompt(descriptor.file));
  return `  { file: CanonicalPromptFile.${descriptor.enumKey}, content: \`${content}\` },`;
};

const ensureOutputDirectory = () => {
  const directory = path.dirname(OUTPUT_FILE);
  if (!fs.existsSync(directory)) {
    fs.mkdirSync(directory, { recursive: true });
  }
};

const writeOutput = () => {
  const sections = CANONICAL_FILES.map(buildSection).join('\n');
  const body = `${HEADER}\n${enumDeclaration}export const CANONICAL_PROMPT_SECTIONS: readonly CanonicalPromptSection[] = [\n${sections}\n];\n`;
  fs.writeFileSync(OUTPUT_FILE, `${body}\n`);
};

const main = () => {
  ensureOutputDirectory();
  writeOutput();
};

main();
